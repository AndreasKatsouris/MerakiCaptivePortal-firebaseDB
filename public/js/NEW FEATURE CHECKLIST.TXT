# RDP Platform Documentation and Development Guide

## Overview
The RDP (Receipt Data Processing) platform consists of a WhatsApp-based receipt processing system with an administrative dashboard. The system is built on Firebase with both server-side (Cloud Functions) and client-side components.

## Loyalty System Workflow

### 1. Guest Entry & Management
- Initial WhatsApp interaction creates guest profile
- Profile tracks:
  - Contact details
  - Visit history
  - Spending patterns
  - Points balance
  - Reward redemptions
  - Preferred stores/items
- Segmentation based on:
  - Visit frequency
  - Average spend
  - Lifetime value
  - Engagement level

### 2. Receipt Processing Details
- Image Processing:
  - OCR scans receipt image
  - Extracts text using Google Cloud Vision
  - Parses store details, items, amounts
  - Validates receipt authenticity
  - Checks for duplicates

- Campaign Matching:
  - Checks receipt against active campaigns
  - Validates:
    - Store eligibility
    - Purchase amount requirements
    - Required items
    - Time/day restrictions
    - Campaign validity period

### 3. Campaign Types & Rules
- Standard Campaigns:
  - Points multiplier days
  - Spend thresholds for rewards
  - Buy-one-get-one offers
  - Category-specific promotions

- Targeted Campaigns:
  - New guest offers
  - Win-back campaigns for inactive guests
  - VIP guest exclusive offers
  - Birthday/anniversary specials

- Campaign Rules Engine:
  - Multiple conditions support
  - Stackable/non-stackable rules
  - Time-based activation
  - Store-specific variations

### 4. Reward Mechanics
- Points System:
  - Base earning rate
  - Bonus point opportunities
  - Points expiry rules
  - Redemption thresholds

- Tier System:
  - Bronze, Silver, Gold, Platinum levels
  - Tier-based benefits:
    - Higher earning rates
    - Exclusive rewards
    - Priority service
    - Special perks

- Reward Types:
  - Instant discounts
  - Point redemptions
  - Free items
  - Exclusive experiences
  - Birthday rewards
  - Milestone rewards

### 5. Guest Communication
- Automated Messages:
  - Welcome messages
  - Points balance updates
  - Reward notifications
  - Campaign announcements
  - Redemption confirmations

- Guest Commands:
  - Check points balance
  - View available rewards
  - See active campaigns
  - Request account info
  - Get help/support

### 6. Analytics & Reporting
- Guest Metrics:
  - Acquisition source
  - Visit frequency
  - Average transaction value
  - Redemption rate
  - Engagement score

- Campaign Analytics:
  - Participation rate
  - Redemption rate
  - ROI calculation
  - Guest segment performance
  - Store performance

- Business Intelligence:
  - Customer lifetime value
  - Churn prediction
  - Campaign effectiveness
  - Store performance comparison
  - Trend analysis

### 7. Integration Points
- POS Systems:
  - Receipt validation
  - Real-time transaction processing
  - Reward redemption

- Store Systems:
  - Inventory management
  - Staff training modules
  - Campaign execution

## System Architecture

### Server-Side Components (Cloud Functions)

#### Data Management (`dataManagement.js`)
- **Purpose**: User data CRUD operations and privacy compliance
- **Key Functions**:
  - `deleteUserData()`: Handles GDPR-compliant data deletion
  - `exportUserData()`: Creates portable user data exports
  - `anonymizeInactiveUsers()`: Manages inactive user privacy
- **Dependencies**: Firebase Admin, Database Integration
- **Connected to**: `receiveWhatsappMessage.js`, `menuLogic.js`

#### Campaign Validation (`guardRail.js`)
- **Purpose**: Receipt validation and campaign matching
- **Key Functions**:
  - `matchReceiptToCampaign()`: Core validation logic
  - `validateReceipt()`: Receipt data validation
  - `validateAgainstCampaign()`: Campaign criteria matching
- **Dependencies**: Firebase Admin
- **Connected to**: `receiptProcessor.js`, `rewardsProcessor.js`

#### Menu Logic (`menuLogic.js`)
- **Purpose**: WhatsApp bot command processing
- **Key Functions**:
  - `processMessage()`: Command routing and handling
  - `getGuestPoints()`: Points balance queries
  - `getGuestRewards()`: Rewards status queries
- **Dependencies**: Firebase Admin, Command Definitions
- **Connected to**: `receiveWhatsappMessage.js`, `dataManagement.js`

#### Receipt Processing (`receiptProcessor.js`)
- **Purpose**: OCR and receipt data extraction
- **Key Functions**:
  - `processReceipt()`: Main receipt processing pipeline
  - `detectReceiptText()`: Google Cloud Vision integration
  - `extractStoreDetails()`, `extractItems()`: Data parsing
- **Dependencies**: Google Cloud Vision, Firebase Admin
- **Connected to**: `guardRail.js`, `textParsingStrategies.js`

#### WhatsApp Handler (`receiveWhatsappMessage.js`)
- **Purpose**: Main WhatsApp interaction handler
- **Key Functions**:
  - `receiveWhatsAppMessage()`: Message entry point
  - `handleReceiptProcessing()`: Receipt workflow
  - `handleTextCommand()`: Command workflow
- **Dependencies**: Twilio, Firebase Admin
- **Connected to**: `twilioClient.js`, `menuLogic.js`, `receiptProcessor.js`

#### Rewards Processing (`rewardsProcessor.js`)
- **Purpose**: Reward generation and distribution
- **Key Functions**:
  - `processReward()`: Reward creation and assignment
  - Firebase reward data structure management
- **Dependencies**: Firebase Admin
- **Connected to**: `guardRail.js`, `receiveWhatsappMessage.js`

#### Twilio Configuration (`twilioClient.js`)
- **Purpose**: WhatsApp messaging setup
- **Key Functions**:
  - Twilio client initialization
  - Environment configuration
- **Dependencies**: Twilio SDK
- **Connected to**: `receiveWhatsappMessage.js`

### Client-Side Components (Public)

#### Admin Dashboard Core (`admin-dashboard.js`)
- **Purpose**: Admin panel core functionality
- **Key Features**:
  - Route management
  - Component initialization
  - Authentication handling
- **Dependencies**: Vue.js, Firebase Client SDK
- **Connected to**: Most client-side components

#### Analytics Dashboard (`dashboard.js`)
- **Purpose**: Analytics and metrics visualization
- **Key Features**:
  - Real-time statistics
  - Chart rendering
  - Data visualization
- **Dependencies**: Chart.js, Firebase Realtime Database
- **Connected to**: `admin-dashboard.js`

#### Guest Management (`guest-management.js`)
- **Purpose**: Guest data management interface
- **Key Features**:
  - Guest profile management
  - Activity tracking
  - Data management interface
- **Dependencies**: Vue.js, Firebase Client SDK
- **Connected to**: `admin-dashboard.js`, `dataManagement.js`

#### Campaign Management Suite
```
campaigns/
  ├── campaign.utils.js      # Utility functions
  ├── campaign.types.js      # TypeScript definitions
  ├── campaign.store.js      # State management (Pinia)
  ├── campaign.constants.js  # Configuration
  ├── campaigns.api.js       # API integration
  └── campaigns.js           # Main functionality
```
- **Purpose**: Campaign management and configuration
- **Dependencies**: Vue.js, Pinia, Firebase Client SDK
- **Connected to**: `admin-dashboard.js`, `guardRail.js`

#### Project Management (`project-management.js`)
- **Purpose**: Project tracking interface
- **Key Features**:
  - Project CRUD operations
  - Task management
  - Progress tracking
- **Dependencies**: Vue.js, Firebase Client SDK
- **Connected to**: `admin-dashboard.js`

#### Reward Types (`reward-types.js`)
- **Purpose**: Reward configuration interface
- **Key Features**:
  - Reward type definitions
  - Validation rules
  - Distribution logic
- **Dependencies**: Vue.js, Firebase Client SDK
- **Connected to**: `rewardsProcessor.js`, `admin-dashboard.js`

#### Text Parsing (`textParsingStrategies.js`)
- **Purpose**: Receipt parsing algorithms
- **Key Features**:
  - Multiple parsing strategies
  - Format detection
  - Data extraction
- **Dependencies**: None (pure JavaScript)
- **Connected to**: `receiptProcessor.js`

## Development Guidelines

### New Feature Implementation Checklist

#### 1. Module Structure
- [ ] Create dedicated module file in appropriate directory
- [ ] Add exports declaration at top of module
- [ ] Verify no duplicate exports exist
- [ ] Export only necessary functions/components
- [ ] Add module import to admin-dashboard.js if needed
- [ ] All new features must use Vue.js

#### 2. Function Implementation
- [ ] Define clear function scope and purpose
- [ ] Implement error handling
- [ ] Add logging for important operations
- [ ] Include proper TypeScript types/interfaces
- [ ] Document function parameters and return values
- [ ] Verify function naming follows project conventions

#### 3. UI Integration
- [ ] Add menu item to sidebar if needed
- [ ] Create content section in admin-dashboard.html
- [ ] Implement proper HTML structure
- [ ] Use semantic HTML elements
- [ ] Follow existing CSS/styling patterns
- [ ] Ensure mobile responsiveness

#### 4. Event Handling
- [ ] Use event delegation for dynamic elements
- [ ] Avoid inline event handlers
- [ ] Properly scope event listeners
- [ ] Clean up event listeners when needed
- [ ] Implement proper error boundaries

#### 5. Firebase Integration
- [ ] Plan data structure
- [ ] Implement proper security rules
- [ ] Use appropriate Firebase methods
- [ ] Handle offline scenarios
- [ ] Implement proper error handling

#### 6. Testing & Validation
- [ ] Test in development environment
- [ ] Check browser console for errors
- [ ] Verify TypeScript/lint warnings
- [ ] Test all user interactions
- [ ] Verify mobile functionality
- [ ] Check performance impact

#### 7. Documentation
- [ ] Add JSDoc comments for functions
- [ ] Document complex logic
- [ ] Update README if needed
- [ ] Document Firebase schema changes
- [ ] Add usage examples if needed

#### 8. Security Considerations
- [ ] Implement input validation
- [ ] Add proper access controls
- [ ] Sanitize user input
- [ ] Verify Firebase security rules
- [ ] Check for XSS vulnerabilities

#### 9. Final Verification
- [ ] No console errors
- [ ] No TypeScript warnings
- [ ] All features functional
- [ ] Mobile responsive
- [ ] Follows project standards
- [ ] Properly integrated

## Notes
- Run through checklist for each new feature
- Document any deviations from standards
- Update checklist as requirements evolve
- Share issues/improvements with team
- Follow Vue.js best practices
/**
 * Food Cost Module - App Component
 * Vue component for the Food Cost module
 */

import { initCharts, updateCharts, destroyCharts } from './chart-manager.js';
import { 
    parseCSV, 
    autoDetectHeaders, 
    processStockData, 
    calculateDerivedValues,
    applyFilters,
    calculateSummary,
    prepareCategoryData,
    prepareTopItemsData
} from './data-processor.js';
import { 
    saveStockDataToDatabase, 
    loadHistoricalData, 
    loadSpecificHistoricalData,
    deleteHistoricalData,
    getItemHistoricalData
} from './database-operations.js';
import { 
    calculateOrderQuantity, 
    calculateSmartOrderQuantity,
    exportPurchaseOrderToCSV,
    generatePurchaseOrder,
    getCalculationDetails
} from './order-calculator.js';
import { 
    formatCurrency, 
    formatValue, 
    calculateDaysBetweenDates,
    getCategoryBadgeClass,
    formatDate,
    generateTimestampKey
} from './utilities.js';

/**
 * Food Cost App component definition
 */
export const FoodCostApp = {
    template: `
        <div class="food-cost-container">
            <div class="section-header d-flex justify-content-end align-items-center mb-3">
                <button v-if="!showStockToolsCard" class="btn btn-primary" @click="showStockToolsCard = true">
                    <i class="fas fa-tools mr-1"></i> Show Stock Data Tools
                </button>
            </div>
            
            <!-- Stock Tools Card -->
            <div v-show="showStockToolsCard" class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Stock Data Tools</h6>
                    <div class="dropdown no-arrow">
                        <button class="btn btn-sm btn-outline-primary" @click="showStockToolsCard = !showStockToolsCard">
                            <i class="fas fa-chevron-up"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="mb-3" v-if="!isDataUploaded || showUploadArea">
                        <button class="btn btn-info mb-3" @click="loadHistoricalData">
                            <i class="fas fa-history mr-1"></i> Load Historical Data
                        </button>
                        
                        <div class="custom-file mb-3">
                            <input type="file" class="custom-file-input" id="foodCostFile" accept=".csv" @change="handleFileUpload">
                            <label class="custom-file-label" for="foodCostFile">Choose CSV file</label>
                        </div>
                        
                        <div class="card mb-3">
                            <div class="card-header py-2">
                                <h6 class="m-0 font-weight-bold text-primary">Store Information</h6>
                            </div>
                            <div class="card-body py-3">
                                <div class="form-group">
                                    <label for="storeName">Store Name</label>
                                    <input type="text" class="form-control" id="storeName" v-model="storeName" placeholder="Enter store name">
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="openingDate">Opening Stock Date</label>
                                            <input type="date" class="form-control" id="openingDate" v-model="openingStockDate">
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="closingDate">Closing Stock Date</label>
                                            <input type="date" class="form-control" id="closingDate" v-model="closingStockDate">
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="salesAmount">Sales Amount:</label>
                                            <input type="number" step="0.01" class="form-control" id="salesAmount" v-model="salesAmount" @change="recalculateFoodCostPercentage">
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="daysToDelivery">Days to Next Delivery:</label>
                                            <input type="number" min="1" class="form-control" id="daysToDelivery" v-model="daysToNextDelivery" @change="recalculateUsageAndReorderPoints">
                                        </div>
                                    </div>
                                </div>
                                <div class="text-info" v-if="stockPeriodDays > 0">
                                    Stock period: {{ stockPeriodDays }} days
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card mb-3">
                        <div class="card-header py-2">
                            <h6 class="m-0 font-weight-bold text-primary">Order Calculation Settings</h6>
                        </div>
                        <div class="card-body py-3">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="safetyStockPercentage">Safety Stock Percentage</label>
                                        <input type="number" class="form-control" id="safetyStockPercentage" v-model="safetyStockPercentage" min="0" max="100">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="criticalItemBuffer">Critical Item Buffer (%)</label>
                                        <input type="number" class="form-control" id="criticalItemBuffer" v-model="criticalItemBuffer" min="0" max="200">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="defaultLeadTimeDays">Default Lead Time (Days)</label>
                                        <input type="number" class="form-control" id="defaultLeadTimeDays" v-model="defaultLeadTimeDays" min="0" max="14">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Header Mapping UI -->
                    <div v-if="showHeaderMapping && parsedHeaders.length > 0" class="mt-4 mb-4">
                        <h5 class="mb-3">Map CSV Headers to Required Fields</h5>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle mr-2"></i> Please map your CSV columns to the required fields. Select the appropriate column for each field.
                            <br>
                            <small>Note: Unit Cost and Stock Level are calculated fields and do not need to be mapped.</small>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Item Code:</strong></label>
                                    <select class="form-control" v-model="headerMapping.itemCode">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Description:</strong></label>
                                    <select class="form-control" v-model="headerMapping.description">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Category:</strong></label>
                                    <select class="form-control" v-model="headerMapping.category">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Opening Stock Qty:</strong></label>
                                    <select class="form-control" v-model="headerMapping.openingValue">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Purchases:</strong></label>
                                    <select class="form-control" v-model="headerMapping.purchases">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Closing Stock Qty:</strong></label>
                                    <select class="form-control" v-model="headerMapping.closingValue">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Opening Stock Value:</strong></label>
                                    <select class="form-control" v-model="headerMapping.openingStockValue">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Purchase Value:</strong></label>
                                    <select class="form-control" v-model="headerMapping.purchaseValue">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Closing Stock Value:</strong></label>
                                    <select class="form-control" v-model="headerMapping.closingStockValue">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Unit:</strong></label>
                                    <select class="form-control" v-model="headerMapping.unit">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Cost Center:</strong></label>
                                    <select class="form-control" v-model="headerMapping.costCenter">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <div class="form-group">
                                    <label><strong>Supplier:</strong></label>
                                    <select class="form-control" v-model="headerMapping.supplierName">
                                        <option value="-1">-- Select Header --</option>
                                        <option v-for="(header, index) in parsedHeaders" :value="index">{{ header }}</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mt-3">
                            <button class="btn btn-primary" @click="processHeaderMapping" :disabled="!isHeaderMappingComplete">
                                <i class="fas fa-check mr-1"></i> Process Data
                            </button>
                            <button class="btn btn-secondary ml-2" @click="resetHeaderMapping">
                                <i class="fas fa-redo mr-1"></i> Reset Mapping
                            </button>
                        </div>
                    </div>
                    
                    <div v-if="isDataUploaded">
                        <div class="d-flex justify-content-between mb-3">
                            <div class="btn-group-food-cost">
                                <button class="btn-food-cost btn-save" @click="saveStockDataToDatabase">
                                    <i class="fas fa-save mr-1"></i>
                                    <span class="btn-text">Save Stock Data</span>
                                </button>
                                <button class="btn-food-cost btn-secondary" @click="showUploadArea = true">
                                    <i class="fas fa-upload mr-1"></i>
                                    <span class="btn-text">Load New Data</span>
                                </button>
                                <button class="btn-food-cost btn-info" @click="loadHistoricalData">
                                    <i class="fas fa-history mr-1"></i>
                                    <span class="btn-text">Historical Data</span>
                                </button>
                            </div>
                            <div>
                                <button class="btn-food-cost btn-primary" @click="generatePurchaseOrder()">
                                    <i class="fas fa-file-invoice mr-1"></i>
                                    <span class="btn-text">Generate Order</span>
                                </button>
                            </div>
                        </div>
                        
                        <div v-if="lastSaveTimestamp" class="alert alert-info">
                            <i class="fas fa-info-circle mr-1"></i> Last saved: {{ lastSaveTimestamp }}
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Analysis Summary Cards -->
            <div class="row mb-4">
                <!-- Sales Amount Card -->
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-primary shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Sales Amount</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">{{ formatCurrency(salesAmount) }}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Cost of Usage Card -->
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-success shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Cost of Usage</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">{{ formatCurrency(totalCostOfUsage) }}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Cost Percentage Card -->
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-info shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Cost Percentage</div>
                                    <div class="row no-gutters align-items-center">
                                        <div class="col-auto">
                                            <div class="h5 mb-0 mr-3 font-weight-bold text-gray-800">{{ costPercentage.toFixed(2) }}%</div>
                                        </div>
                                        <div class="col">
                                            <div class="progress progress-sm mr-2">
                                                <div class="progress-bar bg-info" role="progressbar" :style="{ width: Math.min(100, costPercentage) + '%' }" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-percentage fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Stock Items Card -->
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-warning shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Stock Items</div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">{{ stockData.length }}</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-box fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Data Analysis Charts -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                            <h5 class="m-0 font-weight-bold text-primary">Category-wise Usage Distribution</h5>
                        </div>
                        <div class="card-body">
                            <div class="chart-container" style="position: relative; height:300px;">
                                <canvas id="categoryChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card shadow mb-4">
                        <div class="card-header py-3">
                            <h5 class="m-0 font-weight-bold text-primary">Top 10 Items by Cost of Usage</h5>
                        </div>
                        <div class="card-body">
                            <div class="chart-container" style="position: relative; height:300px;">
                                <canvas id="topItemsChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Stock Data Table -->
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex justify-content-between align-items-center">
                    <h6 class="m-0 font-weight-bold text-primary">Stock Items</h6>
                    <div class="d-flex">
                        <div class="input-group mr-2" style="width: 300px;">
                            <input type="text" class="form-control" placeholder="Search..." v-model="filterOptions.searchTerm" @keyup="applyFilters">
                            <div class="input-group-append">
                                <button class="btn btn-primary" type="button">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                        <button class="btn btn-outline-primary mr-2" @click="openCategoryFilter">
                            Categories <span class="badge badge-light">{{ filterOptions.selectedCategories.length }}</span>
                        </button>
                        <button class="btn btn-outline-primary" @click="openCostCenterFilter">
                            Cost Centers <span class="badge badge-light">{{ filterOptions.selectedCostCenters.length }}</span>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover" id="stockDataTable" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Item Code</th>
                                    <th>Description</th>
                                    <th>Category</th>
                                    <th>Opening</th>
                                    <th>Purchases</th>
                                    <th>Closing</th>
                                    <th>Usage</th>
                                    <th>Unit Cost</th>
                                    <th>Cost of Usage</th>
                                    <th>Usage/Day</th>
                                    <th>Reorder Point</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="item in filteredData" :key="item.itemCode" :class="{'table-danger': item.closingBalance <= item.reorderPoint}">
                                    <td>{{ item.itemCode }}</td>
                                    <td>{{ item.description }}</td>
                                    <td>
                                        <span class="badge" :class="getCategoryBadgeClass(item.category)">{{ item.category }}</span>
                                    </td>
                                    <td>{{ item.openingBalance.toFixed(2) }}</td>
                                    <td>{{ item.purchases.toFixed(2) }}</td>
                                    <td>{{ item.closingBalance.toFixed(2) }}</td>
                                    <td>{{ item.usage.toFixed(2) }}</td>
                                    <td>{{ item.unitCost.toFixed(2) }}</td>
                                    <td>{{ item.costOfUsage.toFixed(2) }}</td>
                                    <td>{{ item.usagePerDay.toFixed(2) }}</td>
                                    <td>{{ item.reorderPoint.toFixed(2) }}</td>
                                    <td>
                                        <button class="btn btn-sm btn-info" @click="showCalculationDetails(item)">
                                            <i class="fas fa-calculator"></i>
                                        </button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            
            <!-- Filter popups for categories and cost centers -->
            <div class="filter-popup-overlay" v-if="showCategoryPopup" @click="closeCategoryFilter">
                <div class="filter-popup" @click.stop>
                    <h4>
                        Filter by Category
                        <button class="close-btn" @click="closeCategoryFilter">&times;</button>
                    </h4>
                    <div class="mb-2">
                        <button class="btn btn-sm btn-primary mr-2" @click="selectAllCategories(true)">Select All</button>
                        <button class="btn btn-sm btn-secondary" @click="selectAllCategories(false)">Deselect All</button>
                    </div>
                    <div class="filter-list">
                        <div v-for="category in filterOptions.availableCategories" :key="category" class="custom-control custom-checkbox">
                            <input 
                                type="checkbox" 
                                class="custom-control-input" 
                                :id="'category-' + category.replace(/\s+/g, '-')" 
                                :value="category" 
                                v-model="filterOptions.selectedCategories"
                            >
                            <label class="custom-control-label" :for="'category-' + category.replace(/\s+/g, '-')">
                                {{ category }}
                            </label>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-primary btn-block" @click="applyFilters(); closeCategoryFilter();">Apply Filters</button>
                    </div>
                </div>
            </div>
            
            <div class="filter-popup-overlay" v-if="showCostCenterPopup" @click="closeCostCenterFilter">
                <div class="filter-popup" @click.stop>
                    <h4>
                        Filter by Cost Center
                        <button class="close-btn" @click="closeCostCenterFilter">&times;</button>
                    </h4>
                    <div class="mb-2">
                        <button class="btn btn-sm btn-primary mr-2" @click="selectAllCostCenters(true)">Select All</button>
                        <button class="btn btn-sm btn-secondary" @click="selectAllCostCenters(false)">Deselect All</button>
                    </div>
                    <div class="filter-list">
                        <div v-for="costCenter in filterOptions.availableCostCenters" :key="costCenter" class="custom-control custom-checkbox">
                            <input 
                                type="checkbox" 
                                class="custom-control-input" 
                                :id="'costCenter-' + costCenter.replace(/\s+/g, '-')" 
                                :value="costCenter" 
                                v-model="filterOptions.selectedCostCenters"
                            >
                            <label class="custom-control-label" :for="'costCenter-' + costCenter.replace(/\s+/g, '-')">
                                {{ costCenter }}
                            </label>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-primary btn-block" @click="applyFilters(); closeCostCenterFilter();">Apply Filters</button>
                    </div>
                </div>
            </div>
            
            <!-- Purchase Order Modal -->
            <div class="modal-overlay" v-if="showPurchaseOrderModal" @click="showPurchaseOrderModal = false">
                <div class="modal-dialog modal-responsive" @click.stop>
                    <div class="modal-content modern-dialog">
                        <div class="dialog-header">
                            <div class="dialog-title">
                                <i class="fas fa-file-invoice mr-2"></i>Generate Purchase Order
                            </div>
                            <button type="button" class="dialog-close" @click="showPurchaseOrderModal = false">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        
                        <div class="dialog-body">
                            <div class="dialog-description">
                                Create and manage purchase orders for items below their reorder point.
                            </div>
                            
                            <!-- Filters and Settings Section -->
                            <div class="dialog-section">
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="dialog-panel">
                                            <div class="dialog-panel-header">
                                                <i class="fas fa-filter mr-2"></i>Supplier Filter
                                            </div>
                                            <div class="dialog-panel-body">
                                                <div class="dialog-form-group">
                                                    <select class="dialog-select" v-model="selectedSupplier" @change="regeneratePurchaseOrder">
                                                        <option v-for="supplier in availableSuppliers" :value="supplier">{{ supplier }}</option>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-8">
                                        <div class="dialog-panel">
                                            <div class="dialog-panel-header">
                                                <i class="fas fa-calculator mr-2"></i>Order Calculation Settings
                                            </div>
                                            <div class="dialog-panel-body">
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="dialog-form-group">
                                                            <label class="dialog-label">Days to Next Delivery</label>
                                                            <div class="dialog-input-group">
                                                                <div class="dialog-input-icon">
                                                                    <i class="fas fa-calendar-day"></i>
                                                                </div>
                                                                <input type="number" min="1" class="dialog-input" v-model="daysToNextDelivery" @change="regeneratePurchaseOrder">
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="dialog-form-group">
                                                            <label class="dialog-label">Safety Stock %</label>
                                                            <div class="dialog-input-group">
                                                                <div class="dialog-input-icon">
                                                                    <i class="fas fa-percentage"></i>
                                                                </div>
                                                                <input type="number" class="dialog-input" v-model="safetyStockPercentage" min="0" max="100" @change="regeneratePurchaseOrder">
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="dialog-form-group">
                                                            <label class="dialog-label">Critical Item Buffer</label>
                                                            <div class="dialog-input-group">
                                                                <div class="dialog-input-icon">
                                                                    <i class="fas fa-exclamation-triangle"></i>
                                                                </div>
                                                                <input type="number" class="dialog-input" v-model="criticalItemBuffer" min="0" max="200" @change="regeneratePurchaseOrder">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Order Summary Section -->
                            <div class="dialog-section" v-if="purchaseOrderItems.length > 0">
                                <div class="dialog-stats">
                                    <div class="dialog-stat-item">
                                        <div class="dialog-stat-icon"><i class="fas fa-boxes"></i></div>
                                        <div class="dialog-stat-content">
                                            <div class="dialog-stat-value">{{ purchaseOrderItems.length }}</div>
                                            <div class="dialog-stat-label">Total Items</div>
                                        </div>
                                    </div>
                                    <div class="dialog-stat-item">
                                        <div class="dialog-stat-icon"><i class="fas fa-tags"></i></div>
                                        <div class="dialog-stat-content">
                                            <div class="dialog-stat-value">{{ [...new Set(purchaseOrderItems.map(item => item.category))].length }}</div>
                                            <div class="dialog-stat-label">Categories</div>
                                        </div>
                                    </div>
                                    <div class="dialog-stat-item">
                                        <div class="dialog-stat-icon"><i class="fas fa-truck"></i></div>
                                        <div class="dialog-stat-content">
                                            <div class="dialog-stat-value">{{ selectedSupplier }}</div>
                                            <div class="dialog-stat-label">Supplier</div>
                                        </div>
                                    </div>
                                    <div class="dialog-stat-item">
                                        <div class="dialog-stat-icon"><i class="fas fa-dollar-sign"></i></div>
                                        <div class="dialog-stat-content">
                                            <div class="dialog-stat-value">{{ formatCurrency(purchaseOrderTotal) }}</div>
                                            <div class="dialog-stat-label">Total Cost</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Sort Controls -->
                            <div class="dialog-section" v-if="purchaseOrderItems.length > 0">
                                <div class="dialog-button-group">
                                    <button class="dialog-button-outline" @click="sortPurchaseOrderItems('category')">
                                        <i class="fas fa-tags mr-1"></i> Sort by Category
                                    </button>
                                    <button class="dialog-button-outline" @click="sortPurchaseOrderItems('description')">
                                        <i class="fas fa-font mr-1"></i> Sort by Description
                                    </button>
                                    <button class="dialog-button-outline" @click="sortPurchaseOrderItems('itemCode')">
                                        <i class="fas fa-barcode mr-1"></i> Sort by Item Code
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Empty State -->
                            <div class="dialog-empty-state" v-if="purchaseOrderItems.length === 0">
                                <div class="dialog-empty-icon">
                                    <i class="fas fa-clipboard-list"></i>
                                </div>
                                <h4>No Items to Order</h4>
                                <p>Try adjusting your supplier filter or order calculation settings.</p>
                            </div>
                            
                            <!-- Order Items Table -->
                            <div class="dialog-table-container" v-if="purchaseOrderItems.length > 0">
                                <table class="dialog-table">
                                    <thead>
                                        <tr>
                                            <th>Item Code</th>
                                            <th>Description</th>
                                            <th>Category</th>
                                            <th>Current Stock</th>
                                            <th>Usage/Day</th>
                                            <th>Required Stock</th>
                                            <th>Order Quantity</th>
                                            <th>Unit</th>
                                            <th>Unit Cost</th>
                                            <th>Total Cost</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr v-for="item in purchaseOrderItems" :key="item.itemCode">
                                            <td class="dialog-cell-code">{{ item.itemCode }}</td>
                                            <td class="dialog-cell-description">{{ item.description }}</td>
                                            <td>
                                                <span class="dialog-badge" :class="getCategoryBadgeClass(item.category)">{{ item.category }}</span>
                                            </td>
                                            <td class="dialog-cell-numeric">{{ item.closingBalance.toFixed(2) }}</td>
                                            <td class="dialog-cell-numeric">{{ item.usagePerDay.toFixed(2) }}</td>
                                            <td class="dialog-cell-numeric">{{ item.requiredStock.toFixed(2) }}</td>
                                            <td class="dialog-cell-quantity">
                                                <div class="dialog-quantity-control">
                                                    <button class="dialog-quantity-button" @click="decrementOrderQuantity(item)">
                                                        <i class="fas fa-minus"></i>
                                                    </button>
                                                    <input type="number" class="dialog-quantity-input" v-model.number="item.orderQuantity" @change="updatePurchaseOrderTotals" min="0">
                                                    <button class="dialog-quantity-button" @click="incrementOrderQuantity(item)">
                                                        <i class="fas fa-plus"></i>
                                                    </button>
                                                </div>
                                            </td>
                                            <td>{{ item.unit }}</td>
                                            <td class="dialog-cell-numeric">{{ item.unitCost.toFixed(2) }}</td>
                                            <td class="dialog-cell-total">{{ (item.orderQuantity * item.unitCost).toFixed(2) }}</td>
                                        </tr>
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <th colspan="9" class="text-right">Total Order Value:</th>
                                            <th class="dialog-cell-grand-total">{{ purchaseOrderTotal.toFixed(2) }}</th>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                        
                        <div class="dialog-footer">
                            <button type="button" class="dialog-button-secondary" @click="showPurchaseOrderModal = false">
                                <i class="fas fa-times mr-1"></i> Cancel
                            </button>
                            <button type="button" class="dialog-button-primary" @click="exportPurchaseOrder" :disabled="purchaseOrderItems.length === 0">
                                <i class="fas fa-file-export mr-1"></i> Export Order
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Historical Data Modal -->
            <div class="modal-overlay" v-if="showHistoricalDataModal" @click="showHistoricalDataModal = false">
                <div class="modal-dialog modal-lg" @click.stop>
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Historical Stock Data</h5>
                            <button type="button" class="close" @click="showHistoricalDataModal = false">&times;</button>
                        </div>
                        <div class="modal-body">
                            <div v-if="isLoading" class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                                <p class="mt-2">{{ loadingMessage }}</p>
                            </div>
                            <div v-else-if="historicalEntries.length === 0" class="text-center py-4">
                                <p class="mb-0">No historical data found.</p>
                            </div>
                            <div v-else class="historical-entries" style="max-height: 400px; overflow-y: auto;">
                                <div v-for="entry in historicalEntries" :key="entry.key" class="border-bottom py-2 d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>{{ entry.storeName }}</strong> 
                                        <span class="badge badge-info ml-2">{{ entry.openingDate || 'No date' }} - {{ entry.closingDate || 'No date' }}</span><br>
                                        <small>Items: {{ entry.totalItems }}, Cost: {{ formatCurrency(entry.totalCostOfUsage) }}</small>
                                    </div>
                                    <div>
                                        <button class="btn btn-sm btn-primary mr-2" @click="loadSpecificHistoricalData(entry.key); showHistoricalDataModal = false;">
                                            <i class="fas fa-upload mr-1"></i> Load
                                        </button>
                                        <button class="btn btn-sm btn-danger" @click="deleteHistoricalData(entry.key, entry.storeName, entry.timestamp)">
                                            <i class="fas fa-trash-alt mr-1"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @click="showHistoricalDataModal = false">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `,
    data() {
        return {
            title: "Food Cost Management",
            version: '1.0.0',
            showStockToolsCard: true,
            showUploadArea: false,
            isSaving: false,
            isDataUploaded: false,
            csvFile: null,
            parsedHeaders: [],
            parsedData: [],
            stockData: [],
            filteredData: [],
            storeName: "",
            openingStockDate: new Date(Date.now() - 86400000).toISOString().split('T')[0], // Yesterday
            closingStockDate: new Date().toISOString().split('T')[0], // Today
            stockPeriodDays: 1,
            daysToNextDelivery: 3,
            safetyStockPercentage: 15,
            criticalItemBuffer: 50,
            defaultLeadTimeDays: 2,
            lastSaveTimestamp: "",
            showHeaderMapping: false,
            headerMapping: {
                itemCode: -1,
                description: -1,
                category: -1,
                unit: -1,
                costCenter: -1,
                openingValue: -1,
                purchases: -1,
                closingValue: -1,
                openingStockValue: -1,
                purchaseValue: -1,
                closingStockValue: -1,
                unitCost: -1,
                supplierName: -1,
                stockLevel: -1
            },
            totalOpeningValue: 0,
            totalPurchases: 0,
            totalClosingValue: 0,
            totalUsage: 0,
            totalCostOfUsage: 0,
            salesAmount: 0,
            costPercentage: 0,
            filterOptions: {
                searchTerm: "",
                availableCategories: [],
                selectedCategories: [],
                availableCostCenters: [],
                selectedCostCenters: [],
            },
            showCategoryPopup: false,
            showCostCenterPopup: false,
            purchaseOrder: {
                supplier: "All Suppliers",
                orderDate: new Date().toISOString().split('T')[0],
                deliveryDate: "",
                items: [],
                excludeZeroQuantities: true
            },
            availableSuppliers: [],
            purchaseOrderTotal: 0,
            showPurchaseOrderModal: false,
            selectedSupplier: "",
            purchaseOrderItems: [],
            showHistoricalDataModal: false,
            historicalEntries: [],
            isLoading: false,
            loadingMessage: ""
        };
    },
    mounted() {
        // Initialize charts when component is mounted
        this.$nextTick(() => {
            initCharts('categoryChart', 'topItemsChart');
            
            // Set default delivery date (7 days from now)
            const deliveryDate = new Date();
            deliveryDate.setDate(deliveryDate.getDate() + 7);
            this.purchaseOrder.deliveryDate = deliveryDate.toISOString().split('T')[0];
            
            // Check for previously uploaded data
            this.checkForUploadedData();
        });
    },
    computed: {
        filteredStockData() {
            return applyFilters(this.stockData, {
                searchTerm: this.filterOptions.searchTerm,
                selectedCategories: this.filterOptions.selectedCategories,
                selectedCostCenters: this.filterOptions.selectedCostCenters
            });
        },
        isHeaderMappingComplete() {
            // We only need these core fields to proceed
            return this.headerMapping.itemCode >= 0 && 
                   this.headerMapping.description >= 0 && 
                   this.headerMapping.openingValue >= 0 && 
                   this.headerMapping.closingValue >= 0;
        }
    },
    watch: {
        openingStockDate() {
            this.updateStockPeriodDays();
            this.recalculateIfDataAvailable();
        },
        closingStockDate() {
            this.updateStockPeriodDays();
            this.recalculateIfDataAvailable();
        },
        daysToNextDelivery() {
            this.recalculateUsageAndReorderPoints();
        }
    },
    methods: {
        formatCurrency,
        
        // File handling methods
        handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = (e) => {
                const csvText = e.target.result;
                const result = parseCSV(csvText);
                this.parsedHeaders = result.headers;
                this.parsedData = result;
                
                // Auto-detect headers if possible
                if (this.parsedHeaders.length > 0) {
                    this.headerMapping = autoDetectHeaders(this.parsedHeaders);
                    
                    if (this.isHeaderMappingComplete) {
                        this.processHeaderMapping();
                    } else {
                        this.showHeaderMapping = true;
                    }
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: 'Could not parse CSV file. Please check the format.',
                        icon: 'error'
                    });
                }
            };
            reader.readAsText(file);
        },
        
        processHeaderMapping() {
            // Process the parsed data with the header mapping
            this.stockData = processStockData(this.parsedData, this.headerMapping);
            
            if (this.stockData.length > 0) {
                // Calculate derived values with stock period days
                this.stockData = calculateDerivedValues(this.stockData, this.stockPeriodDays, this.daysToNextDelivery);
                
                // Extract available categories and cost centers
                this.extractCategoriesAndCostCenters();
                
                // Apply filters
                this.applyFilters();
                
                // Calculate summary
                this.calculateSummary();
                
                // Update UI
                this.updateUI();
                
                // Set upload flag
                this.isDataUploaded = true;
                this.showHeaderMapping = false;
                
                Swal.fire({
                    title: 'Success',
                    text: `Processed ${this.stockData.length} stock items`,
                    icon: 'success'
                });
            } else {
                Swal.fire({
                    title: 'Error',
                    text: 'No valid stock data found in the CSV file',
                    icon: 'error'
                });
            }
        },
        
        extractCategoriesAndCostCenters() {
            this.filterOptions.availableCategories = [];
            this.filterOptions.availableCostCenters = [];
            
            this.stockData.forEach(item => {
                if (item.category && !this.filterOptions.availableCategories.includes(item.category)) {
                    this.filterOptions.availableCategories.push(item.category);
                }
                if (item.costCenter && !this.filterOptions.availableCostCenters.includes(item.costCenter)) {
                    this.filterOptions.availableCostCenters.push(item.costCenter);
                }
            });
            
            // Sort categories and cost centers
            this.filterOptions.availableCategories.sort();
            this.filterOptions.availableCostCenters.sort();
            
            // Select all by default
            this.filterOptions.selectedCategories = [...this.filterOptions.availableCategories];
            this.filterOptions.selectedCostCenters = [...this.filterOptions.availableCostCenters];
        },
        
        // Main functionality methods
        applyFilters() {
            const searchTerm = this.filterOptions.searchTerm.toLowerCase();
            const selectedCategories = this.filterOptions.selectedCategories;
            const selectedCostCenters = this.filterOptions.selectedCostCenters;
            
            this.filteredData = this.stockData.filter(item => {
                // Search term filter
                const matchesSearch = !searchTerm || 
                    item.itemCode.toLowerCase().includes(searchTerm) ||
                    item.description.toLowerCase().includes(searchTerm) ||
                    item.category.toLowerCase().includes(searchTerm) ||
                    (item.supplierName && item.supplierName.toLowerCase().includes(searchTerm));
                
                // Category filter
                const matchesCategory = selectedCategories.length === 0 || 
                    selectedCategories.includes(item.category);
                
                // Cost center filter
                const matchesCostCenter = selectedCostCenters.length === 0 || 
                    selectedCostCenters.includes(item.costCenter);
                
                return matchesSearch && matchesCategory && matchesCostCenter;
            });
            
            // Calculate summary metrics based on filtered data
            this.calculateSummary();
            
            // Update charts with filtered data
            this.updateCharts();
        },
        
        openCategoryFilter() {
            this.showCategoryPopup = true;
        },
        
        closeCategoryFilter() {
            this.showCategoryPopup = false;
        },
        
        openCostCenterFilter() {
            this.showCostCenterPopup = true;
        },
        
        closeCostCenterFilter() {
            this.showCostCenterPopup = false;
        },
        
        selectAllCategories(select) {
            if (select) {
                this.filterOptions.selectedCategories = [...this.filterOptions.availableCategories];
            } else {
                this.filterOptions.selectedCategories = [];
            }
        },
        
        selectAllCostCenters(select) {
            if (select) {
                this.filterOptions.selectedCostCenters = [...this.filterOptions.availableCostCenters];
            } else {
                this.filterOptions.selectedCostCenters = [];
            }
        },
        
        getCategoryBadgeClass(category) {
            // Create a deterministic color based on the category name
            const hash = Array.from(category).reduce(
                (hash, char) => char.charCodeAt(0) + ((hash << 5) - hash), 0
            );
            const hue = Math.abs(hash) % 360;
            return `badge-category-${hue % 5}`;
        },
        
        showCalculationDetails(item) {
            // Calculate theoretical order quantity - CORRECTED FORMULA
            const leadTime = 2; // Standard lead time for orders in days
            
            // Forecast period calculation (removed cycle)
            const forecastPeriod = this.daysToNextDelivery + leadTime;
            
            // Base forecast usage
            const baseUsage = item.usagePerDay * forecastPeriod;
            
            // Apply safety stock percentage
            const safetyFactor = 1 + (this.safetyStockPercentage / 100);
            let forecastUsage = baseUsage * safetyFactor;
            
            // Apply critical item buffer for critical items
            const isCriticalItem = item.isCritical || item.category.toLowerCase().includes('critical');
            if (isCriticalItem && this.criticalItemBuffer > 0) {
                const criticalFactor = 1 + (this.criticalItemBuffer / 100);
                forecastUsage = forecastUsage * criticalFactor;
            }
            
            // Theoretical order quantity (Forecast Usage - Reorder Point)
            // If result is negative, default to 0
            const theoreticalOrderQty = Math.max(0, Math.ceil(forecastUsage - item.reorderPoint));
            
            // Create formatted values for display
            const safetyDisplay = this.safetyStockPercentage > 0 ? 
                `<li>Apply Safety Stock: Base Usage (${baseUsage.toFixed(2)}) × Safety Factor (${safetyFactor.toFixed(2)}) = ${(baseUsage * safetyFactor).toFixed(2)}</li>` : '';
            
            const criticalDisplay = isCriticalItem && this.criticalItemBuffer > 0 ? 
                `<li>Apply Critical Item Buffer: Usage with Safety (${(baseUsage * safetyFactor).toFixed(2)}) × Critical Factor (${(1 + (this.criticalItemBuffer / 100)).toFixed(2)}) = ${forecastUsage.toFixed(2)}</li>` : '';
            
            Swal.fire({
                title: `Calculation Details: ${item.description}`,
                html: `
                    <div class="text-left">
                        <p><strong>Usage Calculation:</strong> Opening (${item.openingBalance.toFixed(2)}) + Purchases (${item.purchases.toFixed(2)}) - Closing (${item.closingBalance.toFixed(2)}) = ${item.usage.toFixed(2)}</p>
                        <p><strong>Cost of Usage:</strong> Usage (${item.usage.toFixed(2)}) × Unit Cost (${item.unitCost.toFixed(2)}) = ${item.costOfUsage.toFixed(2)}</p>
                        <p><strong>Usage per Day:</strong> Usage (${item.usage.toFixed(2)}) ÷ Period (${this.stockPeriodDays} days) = ${item.usagePerDay.toFixed(2)}</p>
                        <p><strong>Reorder Point:</strong> Closing (${item.closingBalance.toFixed(2)}) - (Usage/Day (${item.usagePerDay.toFixed(2)}) × Days to Next Delivery (${this.daysToNextDelivery})) = ${item.reorderPoint.toFixed(2)}</p>
                        <hr>
                        <p><strong>Theoretical Order Quantity:</strong></p>
                        <ol>
                            <li>Forecast Period = Days to Next Delivery (${this.daysToNextDelivery}) + Lead Time (${leadTime}) = ${forecastPeriod} days</li>
                            <li>Base Forecast Usage = Usage/Day (${item.usagePerDay.toFixed(2)}) × Forecast Period (${forecastPeriod}) = ${baseUsage.toFixed(2)}</li>
                            ${safetyDisplay}
                            ${criticalDisplay}
                            <li>Required Order = Forecast Usage (${forecastUsage.toFixed(2)}) - Reorder Point (${item.reorderPoint.toFixed(2)}) = ${(forecastUsage - item.reorderPoint).toFixed(2)}</li>
                            <li>Final Order Quantity = Round up to nearest whole number = ${theoreticalOrderQty}</li>
                        </ol>
                    </div>
                `,
                confirmButtonText: 'Close',
                confirmButtonColor: '#3085d6',
                width: '600px'
            });
        },
        
        // Database operations
        async saveStockDataToDatabase() {
            if (!this.isDataUploaded || this.stockData.length === 0) {
                Swal.fire({
                    title: 'Error',
                    text: 'No data to save',
                    icon: 'error'
                });
                return;
            }
            
            try {
                this.isSaving = true;
                
                // Prepare data for saving
                const data = {
                    storeName: this.storeName,
                    openingDate: this.openingStockDate,
                    closingDate: this.closingStockDate,
                    daysToNextDelivery: this.daysToNextDelivery,
                    stockPeriodDays: this.stockPeriodDays,
                    safetyStockPercentage: this.safetyStockPercentage,
                    criticalItemBuffer: this.criticalItemBuffer,
                    stockItems: this.stockData,
                    totalOpeningValue: this.totalOpeningValue,
                    totalPurchases: this.totalPurchases,
                    totalClosingValue: this.totalClosingValue,
                    totalUsage: this.totalUsage,
                    totalCostOfUsage: this.totalCostOfUsage,
                    salesAmount: this.salesAmount,
                    costPercentage: this.costPercentage
                };
                
                // Show loading indicator
                Swal.fire({
                    title: 'Saving',
                    text: 'Saving data to database...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                // Save to database
                const result = await saveStockDataToDatabase(data);
                
                // Update UI
                this.lastSaveTimestamp = new Date().toLocaleString();
                
                Swal.fire({
                    title: 'Success',
                    text: 'Stock data saved successfully',
                    icon: 'success'
                });
                
                return result;
            } catch (error) {
                console.error('Error saving data:', error);
                
                Swal.fire({
                    title: 'Error',
                    text: error.message || 'Could not save data to database',
                    icon: 'error'
                });
                
                return null;
            } finally {
                this.isSaving = false;
            }
        },
        
        async loadHistoricalData() {
            console.log('Loading historical data...');
            this.isLoading = true;
            this.loadingMessage = 'Loading historical data...';

            // Clear any previous data
            this.historicalEntries = [];

            // Use the imported function from database-operations.js
            return import('./database-operations.js')
                .then(module => {
                    return module.loadHistoricalData();
                })
                .then(historicalEntries => {
                    console.log('Historical entries loaded:', historicalEntries.length);
                    this.historicalEntries = historicalEntries;

                    // Show the historical data modal
                    this.showHistoricalDataModal = true;
                    this.isLoading = false;
                })
                .catch(error => {
                    console.error('Error loading historical data:', error);
                    this.isLoading = false;

                    // Show error message using SweetAlert or other UI feedback
                    if (window.Swal) {
                        window.Swal.fire({
                            title: 'Error',
                            text: `Failed to load historical data: ${error.message}`,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        alert(`Failed to load historical data: ${error.message}`);
                    }
                });
        },
        
        async loadSpecificHistoricalData(key) {
            try {
                console.log('Loading specific historical data...');
                this.isLoading = true;
                this.loadingMessage = 'Loading specific historical data...';

                // Show loading indicator
                Swal.fire({
                    title: 'Loading',
                    text: 'Loading specific historical data...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Load specific historical data
                const data = await loadSpecificHistoricalData(key);

                // Check if data is valid
                if (!data.stockItems || !Array.isArray(data.stockItems)) {
                    throw new Error('Invalid historical data');
                }

                // Load the data into the app
                this.storeName = data.storeName || '';
                this.openingStockDate = data.openingDate || '';
                this.closingStockDate = data.closingDate || '';
                this.daysToNextDelivery = parseInt(data.daysToNextDelivery) || 0;
                this.safetyStockPercentage = parseFloat(data.safetyStockPercentage) || 0;
                this.criticalItemBuffer = parseFloat(data.criticalItemBuffer) || 0;
                this.defaultLeadTimeDays = parseInt(data.defaultLeadTimeDays) || 0;

                this.stockData = data.stockItems;
                this.lastSaveTimestamp = data.formattedTimestamp || '';
                this.isDataUploaded = true;

                // Extract categories and cost centers
                this.extractCategoriesAndCostCenters();

                // Apply filters and update UI
                this.applyFilters();
                this.updateUI();

                // Update stock period days
                this.updateStockPeriodDays();

                Swal.fire({
                    title: 'Success',
                    text: `Loaded historical data from ${data.storeName}`,
                    icon: 'success'
                });

                return data;
            } catch (error) {
                console.error('Error loading specific historical data:', error);

                Swal.fire({
                    title: 'Error',
                    text: error.message || 'Could not load specific historical data',
                    icon: 'error'
                });

                return null;
            }
        },
        
        async deleteHistoricalData(key, storeName = '', timestamp = '') {
            try {
                console.log('Deleting historical data:', key);
                this.isLoading = true;
                this.loadingMessage = 'Deleting historical data...';

                // Confirm deletion
                const confirmText = storeName && timestamp 
                    ? `Are you sure you want to delete the historical data for ${storeName} from ${timestamp}?`
                    : 'Are you sure you want to delete this historical data?';

                let confirmResult;

                if (window.Swal) {
                    confirmResult = await window.Swal.fire({
                        title: 'Confirm Deletion',
                        text: confirmText,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, delete it!',
                        cancelButtonText: 'Cancel'
                    });

                    if (!confirmResult.isConfirmed) {
                        this.isLoading = false;
                        return { success: false, canceled: true };
                    }
                } else {
                    confirmResult = window.confirm(confirmText);
                    if (!confirmResult) {
                        this.isLoading = false;
                        return { success: false, canceled: true };
                    }
                }

                // Use the imported function from database-operations.js following Firebase patterns
                const result = await import('./database-operations.js')
                    .then(module => module.deleteHistoricalData(key));

                // Show success message
                if (window.Swal) {
                    await window.Swal.fire({
                        title: 'Deleted!',
                        text: 'The historical data has been deleted.',
                        icon: 'success'
                    });
                } else {
                    alert('The historical data has been deleted.');
                }

                // Refresh the historical data list
                this.loadHistoricalData();

                this.isLoading = false;
                return result;
            } catch (error) {
                console.error('Error deleting historical data:', error);
                this.isLoading = false;

                // Show error message
                if (window.Swal) {
                    await window.Swal.fire({
                        title: 'Error',
                        text: `Failed to delete historical data: ${error.message}`,
                        icon: 'error'
                    });
                } else {
                    alert(`Failed to delete historical data: ${error.message}`);
                }

                return { success: false, error: error.message };
            }
        },
        
        // Other methods omitted for brevity...
        
        // Stock period days calculation
        updateStockPeriodDays() {
            this.stockPeriodDays = calculateDaysBetweenDates(this.openingStockDate, this.closingStockDate);

            // Recalculate usage per day for all stock items
            if (this.stockData.length > 0) {
                this.stockData = calculateDerivedValues(
                    this.stockData, 
                    this.stockPeriodDays, 
                    this.daysToNextDelivery
                );
            }
        },
        
        // Calculation utilities
        recalculateIfDataAvailable() {
            if (this.isDataUploaded && this.stockData.length > 0) {
                // Recalculate usage per day
                this.stockData = calculateDerivedValues(
                    this.stockData, 
                    this.stockPeriodDays, 
                    this.daysToNextDelivery
                );

                // Update UI
                this.applyFilters();
            }
        },
        
        // Helper methods for existing app functionality that we'll reuse
        checkForUploadedData() {
            // This would typically check for recent data in localStorage or other sources
            // For the refactored version, we'll just initialize with defaults
            console.log('Checking for previously uploaded data...');
        },
        
        // Formatting helpers
        getCategoryBadgeClass(category) {
            return getCategoryBadgeClass(category);
        },
        
        // Chart functions
        updateCharts() {
            const categoryData = prepareCategoryData(this.filteredData);
            const topItemsData = prepareTopItemsData(this.filteredData);

            updateCharts(categoryData, topItemsData);
        },
        
        calculateSummary() {
            if (!this.stockData || this.stockData.length === 0) {
                return;
            }
            
            // Use the filtered data if it exists, otherwise use full stockData
            const dataToUse = this.filteredData && this.filteredData.length > 0 ? this.filteredData : this.stockData;
            
            // Calculate summary metrics based on current filtered data
            this.totalOpeningValue = dataToUse.reduce((sum, item) => sum + (item.openingBalance * item.unitCost), 0);
            this.totalPurchases = dataToUse.reduce((sum, item) => sum + (item.purchases * item.unitCost), 0);
            this.totalClosingValue = dataToUse.reduce((sum, item) => sum + (item.closingBalance * item.unitCost), 0);
            this.totalUsage = dataToUse.reduce((sum, item) => sum + item.usage, 0);
            this.totalCostOfUsage = dataToUse.reduce((sum, item) => sum + item.costOfUsage, 0);
            
            // Recalculate cost percentage when summary changes
            this.recalculateFoodCostPercentage();
        },
        
        updateUI() {
            this.updateCharts();

            // Extract available categories for filtering
            this.filterOptions.availableCategories = [];
            this.filterOptions.availableCostCenters = [];

            this.stockData.forEach(item => {
                // Add categories for filtering
                if (item.category && !this.filterOptions.availableCategories.includes(item.category)) {
                    this.filterOptions.availableCategories.push(item.category);
                }

                // Add cost centers for filtering
                if (item.costCenter && !this.filterOptions.availableCostCenters.includes(item.costCenter)) {
                    this.filterOptions.availableCostCenters.push(item.costCenter);
                }

                // Extract suppliers for purchase orders
                if (item.supplierName && !this.availableSuppliers.includes(item.supplierName)) {
                    this.availableSuppliers.push(item.supplierName);
                }
            });

            // Sort lists alphabetically
            this.filterOptions.availableCategories.sort();
            this.filterOptions.availableCostCenters.sort();
            this.availableSuppliers.sort();

            // Initialize selected filters with all available options
            this.filterOptions.selectedCategories = [...this.filterOptions.availableCategories];
            this.filterOptions.selectedCostCenters = [...this.filterOptions.availableCostCenters];
        },
        
        // Reset header mapping
        resetHeaderMapping() {
            this.headerMapping = {
                itemCode: -1,
                description: -1,
                category: -1,
                unit: -1,
                costCenter: -1,
                openingValue: -1,
                purchases: -1,
                closingValue: -1,
                openingStockValue: -1,
                purchaseValue: -1,
                closingStockValue: -1,
                unitCost: -1,
                supplierName: -1,
                stockLevel: -1
            };

            // Auto-detect headers again
            if (this.parsedHeaders.length > 0) {
                this.headerMapping = autoDetectHeaders(this.parsedHeaders);
            }
        },
        
        recalculateFoodCostPercentage() {
            this.costPercentage = this.salesAmount > 0 
                ? (this.totalCostOfUsage / this.salesAmount) * 100 
                : 0;
        },
        
        /**
         * Recalculate usage per day and reorder points when daysToNextDelivery changes
         */
        recalculateUsageAndReorderPoints() {
            console.log('Recalculating usage per day and reorder points...');
            if (!this.stockData || this.stockData.length === 0) {
                console.log('No stock data available for recalculation');
                return;
            }
            
            // Update stock data with new values based on daysToNextDelivery
            this.stockData = calculateDerivedValues(
                this.stockData, 
                this.stockPeriodDays, 
                this.daysToNextDelivery
            );
            
            // Apply filters and update UI to reflect changes
            this.applyFilters();
            this.updateUI();
            
            console.log('Usage per day and reorder points recalculated');
        },
        
        // Purchase order methods
        generatePurchaseOrder() {
            try {
                console.clear();
                console.log('%c PURCHASE ORDER GENERATION LOGS ', 'background: #f8d7da; color: #721c24; font-size: 16px; font-weight: bold; padding: 5px;');
                console.log('----------------------------------------');
                
                console.log('DEBUG: Starting generatePurchaseOrder function');
                console.log('DEBUG: Stock data length:', this.stockData ? this.stockData.length : 'undefined');
                console.log('DEBUG: Filtered data length:', this.filteredData ? this.filteredData.length : 'undefined');
                
                // Use filtered data for the purchase order if filters are active
                const dataToUse = this.filteredData || this.stockData;
                
                // Ensure availableSuppliers is populated
                this.updateAvailableSuppliers();
                
                // If no supplier is selected, default to All Suppliers
                if (!this.selectedSupplier) {
                    this.selectedSupplier = 'All Suppliers';
                    console.log('DEBUG: No supplier selected, defaulting to "All Suppliers"');
                }
                
                // Add detailed diagnostics for the stock data items
                if (dataToUse && dataToUse.length > 0) {
                    console.log('DEBUG: Analyzing stock items for reorder point issues:');
                    let itemsWithReorderPoints = 0;
                    let itemsBelowReorderPoint = 0;
                    let supplierMatchCount = 0;
                    
                    dataToUse.forEach((item, index) => {
                        // Check for properly calculated reorder points
                        if (typeof item.reorderPoint === 'number') {
                            itemsWithReorderPoints++;
                            
                            // Check if item needs reordering
                            if (item.closingBalance <= item.reorderPoint) {
                                itemsBelowReorderPoint++;
                                
                                // Check if it matches the supplier
                                const supplierMatch = this.selectedSupplier === 'All Suppliers' || 
                                                   (item.supplierName && item.supplierName === this.selectedSupplier);
                                if (supplierMatch) {
                                    supplierMatchCount++;
                                }
                                
                                console.log(`Item #${index+1} needs reordering:`, {
                                    description: item.description,
                                    closingBalance: item.closingBalance,
                                    reorderPoint: item.reorderPoint,
                                    usagePerDay: item.usagePerDay || 0,
                                    daysToNextDelivery: this.daysToNextDelivery,
                                    supplierName: item.supplierName || 'Unknown',
                                    supplierMatch: supplierMatch
                                });
                            }
                        }
                    });
                    
                    console.log(`Stock analysis summary: ${itemsWithReorderPoints} of ${dataToUse.length} items have reorder points, ${itemsBelowReorderPoint} items are below reorder point, ${supplierMatchCount} match the selected supplier "${this.selectedSupplier}"`);
                }
                
                console.log('DEBUG: Stock data sample item:', dataToUse && dataToUse.length > 0 ? JSON.stringify(dataToUse[0]) : 'No items');
                console.log('DEBUG: Selected supplier:', this.selectedSupplier);
                console.log('DEBUG: Available suppliers:', this.availableSuppliers);
                
                // Generate purchase order data
                const orderParams = {
                    daysToNextDelivery: this.daysToNextDelivery,
                    safetyStockPercentage: this.safetyStockPercentage,
                    criticalItemBuffer: this.criticalItemBuffer
                };
                this.purchaseOrderItems = generatePurchaseOrder(dataToUse, this.selectedSupplier, orderParams);
                console.log('DEBUG: Purchase order items count:', this.purchaseOrderItems ? this.purchaseOrderItems.length : 0);
                
                if (this.purchaseOrderItems && this.purchaseOrderItems.length > 0) {
                    this.purchaseOrderTotal = this.purchaseOrderItems.reduce((total, item) => total + (item.orderQuantity * item.unitCost), 0);
                    console.log('DEBUG: Purchase order total:', this.purchaseOrderTotal);
                } else {
                    console.log('%c DEBUG: No items in purchase order! ', 'background: #f8d7da; color: #721c24; font-weight: bold;');
                    
                    // Analyze why no items met the criteria
                    if (dataToUse && dataToUse.length > 0) {
                        let hasSupplierMatch = 0;
                        let hasReorderPointData = 0;
                        let needsReorder = 0;
                        
                        dataToUse.forEach(item => {
                            const supplierMatch = this.selectedSupplier === 'All Suppliers' || 
                                               (item.supplierName && item.supplierName === this.selectedSupplier);
                            if (supplierMatch) hasSupplierMatch++;
                            
                            const hasReorderPoint = item.reorderPoint !== undefined && item.reorderPoint !== null;
                            if (hasReorderPoint) hasReorderPointData++;
                            
                            const itemNeedsReorder = hasReorderPoint && item.closingBalance <= item.reorderPoint;
                            if (itemNeedsReorder) needsReorder++;
                            
                            // Log details for items to help diagnose - log more items
                            if (Math.random() < 0.5) { // Log ~50% of items to avoid flooding console
                                console.log('Item debug:', {
                                    description: item.description,
                                    supplierMatch,
                                    supplier: item.supplierName,
                                    closingBalance: item.closingBalance,
                                    reorderPoint: item.reorderPoint,
                                    usagePerDay: item.usagePerDay,
                                    needsReorder: hasReorderPoint && item.closingBalance <= item.reorderPoint
                                });
                            }
                        });
                        
                        console.log('%c DEBUG Analysis: ', 'background: #fff3cd; color: #856404; font-weight: bold;', {
                            totalItems: dataToUse.length,
                            itemsMatchingSupplier: hasSupplierMatch,
                            itemsWithReorderPointData: hasReorderPointData,
                            itemsNeedingReorder: needsReorder
                        });
                        
                        // Add specific suggestion for the most likely issue
                        if (hasReorderPointData === 0) {
                            console.log('%c LIKELY ISSUE: Missing reorder points - check if "daysToNextDelivery" is set correctly', 'background: #f8d7da; color: #721c24; font-weight: bold;');
                        } else if (needsReorder === 0) {
                            console.log('%c LIKELY ISSUE: No items below reorder point - all stock levels are sufficient', 'background: #d4edda; color: #155724; font-weight: bold;');
                        } else if (hasSupplierMatch === 0) {
                            console.log('%c LIKELY ISSUE: No items match the selected supplier', 'background: #f8d7da; color: #721c24; font-weight: bold;');
                        }
                    }
                }
                
                // Show the modal using Vue state instead of jQuery
                this.showPurchaseOrderModal = true;
                
                // Use setTimeout to ensure the DOM is updated before attempting to focus or other actions
                setTimeout(() => {
                    // If needed, perform any post-display actions here
                    console.log('Purchase order modal shown with', this.purchaseOrderItems.length, 'items');
                }, 100);
                
                console.log('----------------------------------------');
            } catch (error) {
                console.error('%c ERROR in generatePurchaseOrder: ', 'background: #f8d7da; color: #721c24; font-weight: bold;', error);
            }
        },

        // Method to update available suppliers list from stock data
        updateAvailableSuppliers() {
            // Always have "All Suppliers" as the first option
            const suppliers = ['All Suppliers'];
            
            // Extract unique supplier names from stock data
            if (this.stockData && this.stockData.length > 0) {
                this.stockData.forEach(item => {
                    if (item.supplierName && !suppliers.includes(item.supplierName)) {
                        suppliers.push(item.supplierName);
                    }
                });
            }
            
            console.log('DEBUG: Updated available suppliers:', suppliers);
            this.availableSuppliers = suppliers;
        },
        
        // Regenerate purchase order when settings change
        regeneratePurchaseOrder() {
            console.log('Regenerating purchase order with updated settings');
            
            // Recalculate reorder points based on updated settings
            this.recalculateUsageAndReorderPoints();
            
            // Regenerate the purchase order
            const dataToUse = this.filteredData || this.stockData;
            
            // Generate purchase order data
            const orderParams = {
                daysToNextDelivery: this.daysToNextDelivery,
                safetyStockPercentage: this.safetyStockPercentage,
                criticalItemBuffer: this.criticalItemBuffer
            };
            this.purchaseOrderItems = generatePurchaseOrder(dataToUse, this.selectedSupplier, orderParams);
            console.log('Purchase order regenerated with', this.purchaseOrderItems.length, 'items');
            
            // Update totals
            this.updatePurchaseOrderTotals();
        },
        
        updatePurchaseOrderTotals() {
            this.purchaseOrderTotal = this.purchaseOrderItems.reduce((total, item) => total + (item.orderQuantity * item.unitCost), 0);
        },
        
        // Sort purchase order items by specified property
        sortPurchaseOrderItems(property) {
            console.log(`Sorting purchase order items by ${property}`);
            this.purchaseOrderItems.sort((a, b) => {
                if (a[property] < b[property]) return -1;
                if (a[property] > b[property]) return 1;
                return 0;
            });
        },

        // Increment order quantity
        incrementOrderQuantity(item) {
            item.orderQuantity = Math.max(0, (item.orderQuantity || 0) + 1);
            this.updatePurchaseOrderTotals();
        },

        // Decrement order quantity
        decrementOrderQuantity(item) {
            item.orderQuantity = Math.max(0, (item.orderQuantity || 0) - 1);
            this.updatePurchaseOrderTotals();
        },
        
        exportPurchaseOrder() {
            // Generate the CSV content for the purchase order
            const csvContent = exportPurchaseOrderToCSV(this.purchaseOrderItems);

            // Create a blob and download link
            const csvBlob = new Blob([csvContent], { type: 'text/csv' });
            const csvUrl = URL.createObjectURL(csvBlob);
            const csvLink = document.createElement('a');
            csvLink.href = csvUrl;
            csvLink.download = `purchase_order_${new Date().toISOString().slice(0,10)}.csv`;

            // Programmatically click the link to download the file
            document.body.appendChild(csvLink);
            csvLink.click();
            document.body.removeChild(csvLink);

            // Show a success message
            alert('Purchase order exported successfully!');

            // Close the modal
            this.showPurchaseOrderModal = false;
        }
    }
};

export default FoodCostApp;

// Add styles to document
const styleEl = document.createElement('style');
styleEl.textContent = `
    /* Filter popup styles */
    .filter-popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }
    
    .filter-popup {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }
    
    .filter-popup h4 {
        margin-top: 0;
    }
    
    .filter-popup .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 18px;
        cursor: pointer;
        background: none;
        border: none;
    }
    
    .filter-popup .filter-list {
        max-height: 300px;
        overflow-y: auto;
    }
    
    /* Category badges */
    .badge {
        color: #000 !important;
        font-weight: 500;
        padding: 5px 8px;
        border-radius: 4px;
    }
    
    .badge-category-0 {
        background-color: #4e73df;
        color: #000 !important;
    }
    
    .badge-category-1 {
        background-color: #1cc88a;
        color: #000 !important;
    }
    
    .badge-category-2 {
        background-color: #36b9cc;
        color: #000 !important;
    }
    
    .badge-category-3 {
        background-color: #f6c23e;
        color: #000 !important;
    }
    
    .badge-category-4 {
        background-color: #e74a3b;
        color: #000 !important;
    }
    
    /* Modal styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgb(0, 0, 0);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1050;
        padding: 1rem;
        overflow-y: auto;
    }
    
    .modal-responsive {
        position: relative;
        width: 100%;
        max-width: 1200px;
        max-height: 90vh;
        margin: 1.75rem auto;
    }
    
    .modern-dialog {
        width: 100%;
        border-radius: 8px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        border: none;
        display: flex;
        flex-direction: column;
        max-height: 90vh;
        background-color: #ffffff;
    }
    
    .dialog-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: #222222;
        color: #fff;
        padding: 1rem 1.5rem;
        border-bottom: none;
        flex-shrink: 0;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }
    
    .dialog-title {
        font-size: 1.25rem;
        font-weight: 600;
    }
    
    .dialog-close {
        background: transparent;
        border: none;
        color: white;
        font-size: 1.25rem;
        opacity: 0.8;
        transition: opacity 0.2s;
        cursor: pointer;
    }
    
    .dialog-close:hover {
        opacity: 1;
    }
    
    .dialog-body {
        padding: 1.5rem;
        overflow-y: auto;
        flex: 1 1 auto;
        background-color: #ffffff;
    }
    
    .dialog-description {
        color: #555555;
        margin-bottom: 1.5rem;
        font-size: 1rem;
    }
    
    .dialog-section {
        margin-bottom: 1.5rem;
    }
    
    .dialog-panel {
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        height: 100%;
        border: 1px solid #e0e0e0;
    }
    
    .dialog-panel-header {
        background-color: #f5f5f5;
        color: #333333;
        padding: 0.75rem 1rem;
        font-weight: 600;
        border-bottom: 1px solid #e0e0e0;
    }
    
    .dialog-panel-body {
        padding: 1rem;
    }
    
    .dialog-form-group {
        margin-bottom: 1rem;
    }
    
    .dialog-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        font-size: 0.9rem;
        color: #333333;
    }
    
    .dialog-input-group {
        display: flex;
        border: 1px solid #cccccc;
        border-radius: 4px;
        overflow: hidden;
    }
    
    .dialog-input-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f5f5f5;
        color: #333333;
        width: 40px;
        border-right: 1px solid #cccccc;
    }
    
    .dialog-input {
        flex: 1;
        border: none;
        padding: 0.5rem;
        outline: none;
    }
    
    .dialog-select {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #cccccc;
        border-radius: 4px;
        background-color: #fff;
        outline: none;
    }
    
    .dialog-stats {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
    }
    
    .dialog-stat-item {
        flex: 1;
        min-width: 200px;
        display: flex;
        align-items: center;
        padding: 1rem;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        border: 1px solid #e0e0e0;
    }
    
    .dialog-stat-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 48px;
        height: 48px;
        background-color: #f5f5f5;
        color: #333333;
        border-radius: 50%;
        margin-right: 1rem;
        font-size: 1.25rem;
    }
    
    .dialog-stat-content {
        flex: 1;
    }
    
    .dialog-stat-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: #333333;
    }
    
    .dialog-stat-label {
        font-size: 0.875rem;
        color: #666666;
    }
    
    .dialog-button-group {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }
    
    .dialog-button-outline {
        padding: 0.5rem 1rem;
        background-color: transparent;
        border: 1px solid #333333;
        color: #333333;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .dialog-button-outline:hover {
        background-color: #f5f5f5;
    }
    
    .dialog-empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem 1rem;
        background-color: #f5f5f5;
        border-radius: 8px;
        text-align: center;
    }
    
    .dialog-empty-icon {
        font-size: 4rem;
        color: #999999;
        margin-bottom: 1rem;
    }
    
    .dialog-table-container {
        margin-top: 1rem;
        overflow-x: auto;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        border: 1px solid #e0e0e0;
    }
    
    .dialog-table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .dialog-table th {
        background-color: #f5f5f5;
        border-bottom: 2px solid #e0e0e0;
        padding: 0.75rem;
        text-align: left;
        font-weight: 600;
        color: #333333;
    }
    
    .dialog-table td {
        padding: 0.75rem;
        border-bottom: 1px solid #e0e0e0;
    }
    
    .dialog-table tbody tr:hover {
        background-color: #f8f8f8;
    }
    
    .dialog-badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 600;
        text-align: center;
        background-color: #f5f5f5;
        border: 1px solid #e0e0e0;
        color: #333333;
    }
    
    .dialog-cell-code {
        font-family: monospace;
        font-weight: 500;
    }
    
    .dialog-cell-description {
        max-width: 250px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    
    .dialog-cell-numeric {
        text-align: right;
        font-family: monospace;
    }
    
    .dialog-cell-total {
        text-align: right;
        font-weight: 700;
        font-family: monospace;
    }
    
    .dialog-cell-grand-total {
        text-align: right;
        font-size: 1.25rem;
        font-weight: 700;
        color: #333333;
        font-family: monospace;
    }
    
    .dialog-quantity-control {
        display: flex;
        align-items: center;
        max-width: 150px;
    }
    
    .dialog-quantity-button {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        border: 1px solid #cccccc;
        background-color: #f5f5f5;
        color: #333333;
        cursor: pointer;
    }
    
    .dialog-quantity-button:first-child {
        border-radius: 4px 0 0 4px;
    }
    
    .dialog-quantity-button:last-child {
        border-radius: 0 4px 4px 0;
    }
    
    .dialog-quantity-input {
        width: 60px;
        height: 32px;
        border: 1px solid #cccccc;
        border-left: none;
        border-right: none;
        text-align: center;
        padding: 0.25rem;
    }
    
    .dialog-footer {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        padding: 1rem 1.5rem;
        background-color: #f5f5f5;
        border-top: 1px solid #e0e0e0;
        flex-shrink: 0;
        border-bottom-left-radius: 8px;
        border-bottom-right-radius: 8px;
    }
    
    .dialog-button-secondary {
        padding: 0.5rem 1rem;
        background-color: #333333;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    
    .dialog-button-secondary:hover {
        background-color: #555555;
    }
    
    .dialog-button-primary {
        padding: 0.5rem 1rem;
        background-color: #222222;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    
    .dialog-button-primary:hover {
        background-color: #000000;
    }
    
    .dialog-button-primary:disabled {
        background-color: #888888;
        cursor: not-allowed;
    }
`;
document.head.appendChild(styleEl);
